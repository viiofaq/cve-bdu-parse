from bs4 import BeautifulSoup
import psycopg2
import json
import requests
from datetime import date
from fake_useragent import UserAgent

curdate = date.today()
curdate = str(curdate)

with open("settings.txt", 'r') as fp:
    txt_lines = [1, 4, 7, 10, 13]
    lines = []
    for i, line in enumerate(fp):
        if i in txt_lines:
            lines.append(line.strip())

dbname = lines[0]
user = lines[1]
password = lines[2]
host = lines[3]

conn = psycopg2.connect(dbname=dbname, user=user,
                        password=password, host=host)
cursor = conn.cursor()

#################
product_list = []

with open("softwarelist.txt", 'r') as fs:
    for i, line in enumerate(fs):
        product_list.append(line.strip())

product_list_size = len(product_list)

#################

user_agent = UserAgent()
headers = {'accept': 'application/json, text/plain, */*',
           'user-Agent': user_agent.google}

nvd_url = 'https://nvd.nist.gov/vuln/search/results?form_type=Basic&results_type=overview&search_type=all&isCpeNameSearch=false'

nvd_req = requests.get(nvd_url, headers=headers).text
soup_nvd = BeautifulSoup(nvd_req, 'lxml')
table_info = soup_nvd.find_all('table', class_='table table-striped table-hover')

for find_cve in table_info:
    cve_info_html = find_cve.find_all('a')
    for cve_info in cve_info_html:
        cve_id = str(cve_info.text)
        # print(cve_id)
        costil = 0

        cve_mitre_url = 'https://cveawg.mitre.org/api/cve/' + cve_id
        cve_mitre_urln = 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=' + cve_id
        if "LOW" in cve_id:
            costil += 1
        if "MEDIUM" in cve_id:
            costil += 1
        if "HIGH" in cve_id:
            costil += 1
        if "CRITICAL" in cve_id:
            costil += 1
        if costil != 1:

            json_url = requests.get(cve_mitre_url)
            json_from_url = json_url.json()
            json_reform = json.dumps(json_from_url)
            json_text = json.loads(json_reform)

            publish_time = json_text["cveMetadata"]["datePublished"]
            publish_time = publish_time[:10]
            cve_descript = json_text["containers"]["cna"]["descriptions"][0]["value"]
            product_name = json_text["containers"]["cna"]["affected"][0]["product"]

            cve_status = json_text["containers"]["cna"]["affected"][0]["versions"][0]["status"]

            try:
                cve_status_vers = json_text["containers"]["cna"]["affected"][0]["versions"][0]["lessThan"]
                cve_status_vers = str(cve_status_vers)
                cve_status = str(cve_status)
                cve_status = cve_status + ' under ' + cve_status_vers
            except KeyError:
                pass

            try:
                cwe = json_text["containers"]["cna"]["problemTypes"][0]["descriptions"][0]["description"]
            except KeyError:
                cwe = 'нет информации'
                pass

            try:
                cvss30 = json_text["containers"]["cna"]["metrics"][0]["cvssV3_0"]["baseSeverity"]
                cvss_score30 = json_text["containers"]["cna"]["metrics"][0]["cvssV3_0"]["baseScore"]
                cvss30 = str(cvss30)
                cvss_score30 = str(cvss_score30)
                cvss_sum = cvss30 + " " + cvss_score30
            except KeyError:
                cvss_sum = 'нет информации'
                pass
            try:
                cvss31 = json_text["containers"]["cna"]["metrics"][0]["cvssV3_1"]["baseSeverity"]
                cvss_score31 = json_text["containers"]["cna"]["metrics"][0]["cvssV3_1"]["baseScore"]
                cvss31 = str(cvss31)
                cvss_score31 = str(cvss_score31)
                cvss_sum = cvss31 + " " + cvss_score31

            except KeyError:
                cvss_sum = 'нет информации'
                pass

            try:
                links = json_text["containers"]["cna"]["references"][0]["url"]
                links = str(links)
                links = links + '\n' + cve_mitre_url + "\n" + cve_mitre_urln
            except KeyError:
                links = 'нет информации'
                pass

            if not product_list:
                cursor.execute(
                    "INSERT INTO cvelist(cveid,datepublished,cvss,software,softwareversion,description,cwe,"
                    "links) VALUES(%s,%s,%s,%s,%s,%s,%s,%s)",
                    (cve_id, publish_time, cvss_sum, product_name, cve_status, cve_descript, cwe, links))

                pass
            else:
                if publish_time == curdate:
                    for i in range(product_list_size):
                        if product_list[i] in cve_descript or product_list[i] in product_name:
                            cursor.execute(
                                "INSERT INTO cvelist(cveid,datepublished,cvss,software,softwareversion,description,"
                                "cwe,links) VALUES(%s,%s,%s,%s,%s,%s,%s,%s)",
                                (cve_id, publish_time, cvss_sum, product_name, cve_status, cve_descript, cwe, links))

#print("MITRE DONE")

conn.commit()
cursor.close()
conn.close()
